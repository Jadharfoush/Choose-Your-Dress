name: Docker Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Fetch Jenkins Crumb
      run: |
        crumb=$(curl -s -u ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} "http://3.75.204.56:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)")
        echo "CRUMB=$crumb" >> $GITHUB_ENV
      env:
        JENKINS_USER: ${{ secrets.JENKINS_USER }}
        JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}

    - name: Trigger Jenkins Validation
      run: |
        curl -X POST "http://3.75.204.56:8080/job/ValidationPipeline/build?token=${{ secrets.JENKINS_TOKEN }}" -u ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} -H "${{ env.CRUMB }}"
      env:
        JENKINS_USER: ${{ secrets.JENKINS_USER }}
        JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
        CRUMB: ${{ env.CRUMB }}

    - name: Wait for Jenkins Job to Complete
      run: |
        timeout=0
        max_timeout=1800
        while [ $timeout -lt $max_timeout ]; do
          response=$(curl -s -u ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} -H "$CRUMB" "http://3.75.204.56:8080/job/ValidationPipeline/lastBuild/api/json")
          status=$(echo $response | jq -r '.result')
          echo "Current job status: $status"
          
          if [ "$status" == "SUCCESS" ]; then
            echo "Jenkins job succeeded."
            break
          elif [ "$status" == "FAILURE" ]; then
            echo "Jenkins job failed."
            exit 1
          elif [ "$status" == "null" ]; then
            echo "Jenkins job is still running..."
          else
            echo "Received unexpected status."
          fi
          
          if [ $timeout -ge $max_timeout ]; then
            echo "Timed out waiting for Jenkins job to complete."
            exit 1
          fi
          
          sleep 30
          timeout=$((timeout + 30))
        done
      env:
        JENKINS_USER: ${{ secrets.JENKINS_USER }}
        JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
        CRUMB: ${{ env.CRUMB }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u jadharfoush --password-stdin

    - name: Build and Push Docker Image
      run: |
        docker buildx build --platform linux/amd64 -t jadharfoush/chooseyourdress:latest --push .
      working-directory: ./DressUp

    - name: Deploy to Machine 1
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ubuntu@3.74.162.139 "docker pull jadharfoush/chooseyourdress:latest && docker run -d --name chooseyourdress -p 8000:8000 jadharfoush/chooseyourdress:latest"
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to Machine 2
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ubuntu@18.199.67.122 "docker pull jadharfoush/chooseyourdress:latest && docker run -d --name chooseyourdress -p 8000:8000 jadharfoush/chooseyourdress:latest"
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
