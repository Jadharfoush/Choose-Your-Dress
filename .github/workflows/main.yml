name: Docker Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Fetch Jenkins Crumb
      run: |
        crumb=$(curl -s -u ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} "http://3.75.204.56:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)")
        echo "Crumb received: $crumb"
        echo "CRUMB=$crumb" >> $GITHUB_ENV
      env:
        JENKINS_USER: ${{ secrets.JENKINS_USER }}
        JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}

    - name: Trigger Jenkins and Capture Build Number
      id: trigger_jenkins
      run: |
        # Trigger the job and get the queue item number
        queue_item_url=$(curl -s -X POST "http://3.75.204.56:8080/job/ValidationPipeline/build?token=${{ secrets.JENKINS_TOKEN }}" \
          -u ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} -H "${CRUMB}" -D - \
          | grep 'Location' | awk '{print $2}' | tr -d '\r')

        echo "Queue item URL: $queue_item_url"
        
        # Poll the queue item to get the actual build number
        while true; do
          response=$(curl -s -u ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} -H "${CRUMB}" "${queue_item_url}api/json")
          build_number=$(echo $response | jq -r '.executable.number')
          
          if [ "$build_number" != "null" ]; then
            echo "Build number: $build_number"
            echo "::set-output name=build_number::$build_number"
            break
          fi
          sleep 5
        done
      env:
        JENKINS_USER: ${{ secrets.JENKINS_USER }}
        JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
        CRUMB: ${{ env.CRUMB }}

    - name: Wait for Jenkins Job to Complete
      run: |
        build_number=${{ steps.trigger_jenkins.outputs.build_number }}
        max_timeout=1800  # Maximum time to wait in seconds.
        start_time=$(date +%s)
        
        while true; do
          current_time=$(date +%s)
          elapsed=$(( current_time - start_time ))

          if [ $elapsed -ge $max_timeout ]; then
            echo "Timed out waiting for Jenkins job to complete."
            exit 1
          fi

          response=$(curl -s -u ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} -H "${CRUMB}" "http://3.75.204.56:8080/job/ValidationPipeline/$build_number/api/json")
          status=$(echo $response | jq -r '.result')
          echo "Current job status: $status"

          if [ "$status" == "SUCCESS" ]; then
            echo "Jenkins job succeeded."
            break
          elif [ "$status" == "FAILURE" ]; then
            echo "Jenkins job failed."
            exit 1
          fi

          sleep 30
        done
      env:
        JENKINS_USER: ${{ secrets.JENKINS_USER }}
        JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
        CRUMB: ${{ env.CRUMB }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u jadharfoush --password-stdin

    - name: Build and Push Docker Image
      run: |
        docker buildx build --platform linux/amd64 -t jadharfoush/chooseyourdress:latest --push .
      working-directory: ./DressUp

    - name: Deploy to Machine 1
      uses: appleboy/ssh-action@master
      with:
        host: 3.74.162.139
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
         docker stop chooseyourdress || true  # Stop existing container if running, ignoring errors if it's not running
         docker rm chooseyourdress || true    # Remove existing container if it exists, ignoring errors if it doesn't exist

          docker pull jadharfoush/chooseyourdress:latest
          docker run -d --name chooseyourdress -p 8000:8000 jadharfoush/chooseyourdress:latest

    - name: Deploy to Machine 2
      uses: appleboy/ssh-action@master
      with:
        host: 18.199.67.122
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
         docker stop chooseyourdress || true  # Stop existing container if running, ignoring errors if it's not running
         docker rm chooseyourdress || true    # Remove existing container if it exists, ignoring errors if it doesn't exist

          docker pull jadharfoush/chooseyourdress:latest
          docker run -d --name chooseyourdress -p 8000:8000 jadharfoush/chooseyourdress:latest
